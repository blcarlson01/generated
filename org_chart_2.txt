import React, { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";

// Full 5-level demo org (subtle color shifts by level)
const orgData = {
  ceo: { id: "ceo", label: "CEO", color: "bg-blue-700", info: "Chief Executive Officer", stats: { headcount: 1, budget: "$10M", satisfaction: "95%" }, overview: "Leads the organization.", trends: { headcount: "+1", budget: "-1%", satisfaction: "+2%" }, children: ["cto", "cfo", "coo"] },

  /* CTO branch (5 levels deep) */
  cto: { id: "cto", label: "CTO", color: "bg-blue-600", info: "Technology Division", stats: { headcount: 40, budget: "$4M", satisfaction: "89%" }, overview: "Runs technology and engineering.", trends: { headcount: "+5", budget: "-2%", satisfaction: "+3%" }, children: ["eng", "qa"] },
  eng: { id: "eng", label: "Engineering", color: "bg-blue-500", info: "Software Development", stats: { headcount: 20, budget: "$2M", satisfaction: "90%" }, overview: "Builds products.", trends: { headcount: "+3", budget: "+0%", satisfaction: "+1%" }, children: ["frontend", "backend"] },
  frontend: { id: "frontend", label: "Frontend", color: "bg-blue-400", info: "UI/UX Dev", stats: { headcount: 10, budget: "$1M", satisfaction: "88%" }, overview: "Client-side apps.", trends: { headcount: "+1", budget: "+0%", satisfaction: "+1%" }, children: ["frontend-a", "frontend-b"] },
  "frontend-a": { id: "frontend-a", label: "Frontend A", color: "bg-blue-300", info: "React Apps", stats: { headcount: 5, budget: "$500k", satisfaction: "87%" }, overview: "Customer portal team.", trends: { headcount: "+1", budget: "+0%", satisfaction: "-1%" }, children: ["frontend-a-i"] },
  "frontend-a-i": { id: "frontend-a-i", label: "Frontend A - Team 1", color: "bg-blue-200", info: "Portal Features", stats: { headcount: 2, budget: "$200k", satisfaction: "86%" }, overview: "Feature work.", trends: { headcount: "+0", budget: "+0%", satisfaction: "+0%" } },
  "frontend-b": { id: "frontend-b", label: "Frontend B", color: "bg-blue-300", info: "Design Systems", stats: { headcount: 5, budget: "$500k", satisfaction: "90%" }, overview: "Design systems and components.", trends: { headcount: "+0", budget: "+0%", satisfaction: "+2%" } },

  backend: { id: "backend", label: "Backend", color: "bg-blue-400", info: "Server & APIs", stats: { headcount: 10, budget: "$1M", satisfaction: "89%" }, overview: "APIs and services.", trends: { headcount: "+2", budget: "+0%", satisfaction: "-1%" }, children: ["backend-a", "backend-b"] },
  "backend-a": { id: "backend-a", label: "Backend A", color: "bg-blue-300", info: "Data Services", stats: { headcount: 5, budget: "$600k", satisfaction: "85%" }, overview: "Data pipelines.", trends: { headcount: "+0", budget: "-1%", satisfaction: "-1%" } },
  "backend-b": { id: "backend-b", label: "Backend B", color: "bg-blue-300", info: "Core Services", stats: { headcount: 5, budget: "$600k", satisfaction: "86%" }, overview: "Auth & core services.", trends: { headcount: "+1", budget: "-1%", satisfaction: "+0%" } },

  /* CFO branch */
  cfo: { id: "cfo", label: "CFO", color: "bg-sky-600", info: "Finance Division", stats: { headcount: 20, budget: "$3M", satisfaction: "91%" }, overview: "Finance & planning.", trends: { headcount: "+2", budget: "+1%", satisfaction: "+1%" }, children: ["finance", "acct"] },
  finance: { id: "finance", label: "Finance", color: "bg-sky-500", info: "Budgets & Planning", stats: { headcount: 10, budget: "$1M", satisfaction: "90%" }, overview: "Forecasting.", trends: { headcount: "+1", budget: "-1%", satisfaction: "+0%" }, children: ["finance-a"] },
  "finance-a": { id: "finance-a", label: "FP&A", color: "bg-sky-400", info: "Planning & Analysis", stats: { headcount: 6, budget: "$700k", satisfaction: "89%" }, overview: "Reporting & forecasts.", trends: { headcount: "+1", budget: "+0%", satisfaction: "+1%" }, children: ["finance-a-i"] },
  "finance-a-i": { id: "finance-a-i", label: "FP&A - Team 1", color: "bg-sky-300", info: "Forecast Team", stats: { headcount: 3, budget: "$300k", satisfaction: "88%" }, overview: "Monthly forecasting.", trends: { headcount: "+0", budget: "+0%", satisfaction: "+0%" } },
  acct: { id: "acct", label: "Accounting", color: "bg-sky-400", info: "Accounts & Payroll", stats: { headcount: 10, budget: "$800k", satisfaction: "89%" }, overview: "Accounting operations.", trends: { headcount: "+1", budget: "+0%", satisfaction: "+1%" } },

  /* COO branch */
  coo: { id: "coo", label: "COO", color: "bg-emerald-600", info: "Operations Division", stats: { headcount: 25, budget: "$3.5M", satisfaction: "88%" }, overview: "Operations & logistics.", trends: { headcount: "+3", budget: "-1%", satisfaction: "-1%" }, children: ["ops", "supply"] },
  ops: { id: "ops", label: "Operations", color: "bg-emerald-500", info: "Manufacturing & Logistics", stats: { headcount: 12, budget: "$1.2M", satisfaction: "87%" }, overview: "Production management.", trends: { headcount: "+1", budget: "+0%", satisfaction: "-2%" } },
  supply: { id: "supply", label: "Supply Chain", color: "bg-emerald-400", info: "Inventory & Fulfillment", stats: { headcount: 13, budget: "$900k", satisfaction: "84%" }, overview: "Fulfillment operations.", trends: { headcount: "+1", budget: "-1%", satisfaction: "-1%" } }
};

export default function OrgTileMap() {
  const [activeNodeId, setActiveNodeId] = useState("ceo");
  const [history, setHistory] = useState([]); // store node ids
  const overviewRef = useRef(null);

  const activeNode = orgData[activeNodeId];
  const children = (activeNode.children || []).map((id) => orgData[id]).filter(Boolean);
  const path = [...history, activeNodeId];

  useEffect(() => {
    // keep body from scrolling behind the fixed layout in some environments
    return () => {};
  }, []);

  const handleTileClick = (nodeId) => {
    if (!orgData[nodeId]) return;
    // push current onto history
    setHistory((h) => [...h, activeNodeId]);
    setActiveNodeId(nodeId);
  };

  const handleBack = () => {
    setHistory((h) => {
      if (!h.length) return h;
      const copy = [...h];
      const prevId = copy.pop();
      if (prevId && orgData[prevId]) setActiveNodeId(prevId);
      return copy;
    });
  };

  const handleBreadcrumbClick = (index) => {
    const targetId = path[index];
    if (!targetId) return;
    const newHistory = path.slice(0, index);
    setHistory(newHistory);
    setActiveNodeId(targetId);
  };

  const handleJumpOverview = (nodeId) => {
    // set overview and scroll smoothly to bottom section
    if (!orgData[nodeId]) return;
    setActiveNodeId(nodeId);
    setTimeout(() => {
      if (overviewRef.current) overviewRef.current.scrollIntoView({ behavior: "smooth", block: "start" });
    }, 100);
  };

  return (
    <TooltipProvider>
      <div className="relative flex flex-row items-start p-8 gap-8">
        {/* Main area (map + lower section) */}
        <div className="relative flex flex-col items-start flex-grow">
          {/* Breadcrumbs */}
          <nav className="w-full max-w-6xl mb-4 text-sm text-gray-600">
            <ol className="flex items-center gap-2">
              {path.map((id, idx) => {
                const node = orgData[id];
                if (!node) return null;
                return (
                  <li key={id} className="flex items-center">
                    <button
                      onClick={() => handleBreadcrumbClick(idx)}
                      className={`text-sm ${idx === path.length - 1 ? "font-semibold text-gray-900" : "text-gray-600 hover:underline"}`}
                    >
                      {node.label}
                    </button>
                    {idx < path.length - 1 && <span className="mx-2">›</span>}
                  </li>
                );
              })}
            </ol>
          </nav>

          <div className="flex items-center gap-4 mb-4">
            {history.length > 0 && (
              <Button onClick={handleBack} variant="outline" size="sm">← Back</Button>
            )}
            <h3 className="text-lg font-medium">{activeNode.label}</h3>
          </div>

          {/* Centered parent */}
          <div className="flex items-center justify-center w-full">
            <Tooltip>
              <TooltipTrigger asChild>
                <motion.div
                  data-node-id={activeNode.id}
                  whileHover={{ scale: 1.03 }}
                  onClick={() => handleTileClick(activeNode.id)}
                  className={`relative z-10 rounded-2xl shadow-md text-white flex items-center justify-center cursor-pointer transition-all duration-200 ${activeNode.color}`}
                  style={{ width: 144, height: 56 }}
                >
                  <span className="text-sm font-medium">{activeNode.label}</span>
                </motion.div>
              </TooltipTrigger>
              <TooltipContent side="top" className="shadow-lg">
                <Card className="border-none bg-white text-gray-800 min-w-[180px]">
                  <CardContent className="p-3 text-sm">
                    <strong className="block mb-1">{activeNode.label}</strong>
                    <div className="text-xs text-gray-600 mb-1">{activeNode.info}</div>
                    {activeNode.stats && (
                      <div className="text-xs">
                        <div><strong>Headcount:</strong> {activeNode.stats.headcount}</div>
                        <div><strong>Budget:</strong> {activeNode.stats.budget}</div>
                        <div><strong>Satisfaction:</strong> {activeNode.stats.satisfaction}</div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TooltipContent>
            </Tooltip>
          </div>

          {/* Children row */}
          <div className="mt-6 grid gap-4 w-full" style={{ gridTemplateColumns: `repeat(${Math.max(1, children.length)}, 6rem)`, justifyContent: 'center' }}>
            {children.length === 0 ? (
              <div className="text-gray-500">No sub-teams for this role</div>
            ) : (
              children.map((tile) => (
                <Tooltip key={tile.id}>
                  <TooltipTrigger asChild>
                    <motion.div
                      data-node-id={tile.id}
                      whileHover={{ scale: 1.05 }}
                      onClick={() => handleTileClick(tile.id)}
                      className={`relative z-10 rounded-2xl shadow-md text-white flex items-center justify-center cursor-pointer transition-all duration-200 ${tile.color}`}
                      style={{ width: 96, height: 48 }}
                    >
                      <span className="text-sm font-medium">{tile.label}</span>
                    </motion.div>
                  </TooltipTrigger>
                  <TooltipContent side="top" className="shadow-lg">
                    <Card className="border-none bg-white text-gray-800 min-w-[160px]">
                      <CardContent className="p-3 text-sm">
                        <strong className="block mb-1">{tile.label}</strong>
                        <div className="text-xs text-gray-600 mb-1">{tile.info}</div>
                        <div className="text-xs">
                          <div><strong>Headcount:</strong> {tile.stats.headcount}</div>
                          <div><strong>Budget:</strong> {tile.stats.budget}</div>
                          <div><strong>Satisfaction:</strong> {tile.stats.satisfaction}</div>
                        </div>
                      </CardContent>
                    </Card>
                  </TooltipContent>
                </Tooltip>
              ))
            )}
          </div>

          {/* Lower overview section (grows naturally) */}
          <div ref={overviewRef} className="w-full mt-8">
            <AnimatePresence>
              <motion.section key={activeNode.id} initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 8 }} transition={{ duration: 0.35 }} className="w-full rounded-xl p-8 bg-gradient-to-b from-gray-50 via-gray-100 to-white shadow-sm">
                <div className="max-w-6xl mx-auto">
                  <div className="flex items-start justify-between gap-6">
                    <div>
                      <h2 className="text-2xl font-bold">{activeNode.label} — {activeNode.info}</h2>
                      <p className="mt-2 text-gray-700 max-w-3xl">{activeNode.overview}</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}>Back to Map</Button>
                    </div>
                  </div>

                  {/* Metrics grid */}
                  <div className="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4">
                    {/* Headcount card */}
                    <Card className="p-4 bg-gradient-to-b from-white to-gray-100 shadow-sm">
                      <CardContent className="p-0">
                        <div className="text-xs text-gray-500">Headcount</div>
                        <div className="mt-2 flex items-center gap-2">
                          <div className="text-3xl font-semibold">{activeNode.stats.headcount}</div>
                          <div className={`text-sm ${activeNode.trends.headcount.startsWith("+") ? "text-green-600" : "text-red-600"}`}>
                            {activeNode.trends.headcount}
                          </div>
                        </div>
                        <div className="mt-2 text-xs text-gray-500">Employees total in this unit</div>
                      </CardContent>
                    </Card>

                    {/* Budget card */}
                    <Card className="p-4 bg-gradient-to-b from-white to-gray-100 shadow-sm">
                      <CardContent className="p-0">
                        <div className="text-xs text-gray-500">Budget</div>
                        <div className="mt-2 flex items-center justify-between gap-2">
                          <div className="text-lg font-semibold">{activeNode.stats.budget}</div>
                          <div className={`text-sm ${activeNode.trends.budget.startsWith("+") ? "text-green-600" : "text-red-600"}`}>
                            {activeNode.trends.budget}
                          </div>
                        </div>

                        {/* simple progress bar (demo) */}
                        <div className="mt-3">
                          <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                            <div className="h-2 rounded-full bg-sky-400" style={{ width: `${Math.min(100, Math.round((parseFloat(activeNode.stats.budget.replace(/[$Mkk,]/g, "")) % 100)))}%` }} />
                          </div>
                          <div className="mt-1 text-xs text-gray-500">% of org budget (demo)</div>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Satisfaction card */}
                    <Card className="p-4 bg-gradient-to-b from-white to-gray-100 shadow-sm">
                      <CardContent className="p-0 flex items-center gap-4">
                        <div className="flex-shrink-0">
                          <svg width="56" height="56" viewBox="0 0 36 36" className="transform -rotate-90">
                            <circle cx="18" cy="18" r="16" strokeWidth="3" stroke="#e6eaf0" fill="none" />
                            <circle cx="18" cy="18" r="16" strokeWidth="3" stroke="#0ea5e9" strokeLinecap="round" fill="none" style={{ strokeDasharray: `${parseInt(activeNode.stats.satisfaction)} ${100 - parseInt(activeNode.stats.satisfaction)}` }} />
                          </svg>
                        </div>
                        <div>
                          <div className="text-xs text-gray-500">Satisfaction</div>
                          <div className="text-2xl font-semibold">{activeNode.stats.satisfaction}</div>
                          <div className={`text-sm ${activeNode.trends.satisfaction.startsWith("+") ? "text-green-600" : "text-red-600"}`}>{activeNode.trends.satisfaction}</div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  <div className="mt-6 text-xs text-gray-600">
                    <strong>Notes:</strong> Demo metrics and trends. Replace with real data for production.
                  </div>
                </div>
              </motion.section>
            </AnimatePresence>
          </div>
        </div>

        {/* Right caption / details panel */}
        <Card className="w-80 shadow-md border border-gray-200 bg-gradient-to-b from-blue-50 to-gray-50 text-gray-800 sticky top-8 self-start">
          <CardContent className="p-4 text-sm space-y-3">
            <h4 className="text-lg font-semibold mb-2">{activeNode.label} Overview</h4>
            <p className="text-sm">{activeNode.overview}</p>
            {activeNode.stats && (
              <div className="pt-2 border-t border-gray-200 text-xs">
                <div><strong>Headcount:</strong> {activeNode.stats.headcount}</div>
                <div><strong>Budget:</strong> {activeNode.stats.budget}</div>
                <div><strong>Satisfaction:</strong> {activeNode.stats.satisfaction}</div>
              </div>
            )}

            <div className="pt-4 border-t border-gray-200 text-xs">
              <strong>Color Gradient Meaning:</strong>
              <div className="mt-2 space-y-2">
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-700" />
                  <span>Executive leadership</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-500" />
                  <span>Department heads</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-300" />
                  <span>Mid-level teams</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-200" />
                  <span>Sub-teams or specialized units</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
}
