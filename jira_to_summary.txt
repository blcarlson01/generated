import os
import requests
import openai
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import json

# ----------------------------
# CONFIGURATION
# ----------------------------

JIRA_BASE = "https://your-jira-instance"
PROJECT_KEY = "PROJ"     # Replace with your project key
BOARD_ID = 123           # Replace with your board ID

# Paths to PEM files derived from .p12
CLIENT_CERT = "client_cert.pem"
CLIENT_KEY = "client_key.pem"

# OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# Confluence
CONFLUENCE_BASE_URL = "https://your-confluence-instance/wiki"
CONFLUENCE_USER = "your-username"
CONFLUENCE_TOKEN = "your-api-token"
CONFLUENCE_PAGE_ID = "123456"  # Page ID to overwrite with new summary

# Email
SMTP_SERVER = "smtp.yourcompany.com"
SMTP_PORT = 587
EMAIL_FROM = "reports@yourcompany.com"
EMAIL_TO = ["leader1@company.com", "leader2@company.com"]

# ----------------------------
# 1. Fetch Active Sprint
# ----------------------------

def get_active_sprint():
    url = f"{JIRA_BASE}/rest/agile/1.0/board/{BOARD_ID}/sprint?state=active"
    r = requests.get(url, cert=(CLIENT_CERT, CLIENT_KEY), verify=True)
    r.raise_for_status()
    sprints = r.json()["values"]
    if not sprints:
        raise Exception("No active sprint found")
    return sprints[0]

# ----------------------------
# 2. Fetch Issues + Comments
# ----------------------------

def get_issues(sprint_id):
    jql = f"sprint = {sprint_id} AND project = {PROJECT_KEY}"
    url = f"{JIRA_BASE}/rest/api/2/search"
    params = {"jql": jql, "maxResults": 1000}
    r = requests.get(url, params=params, cert=(CLIENT_CERT, CLIENT_KEY), verify=True)
    r.raise_for_status()
    return r.json()["issues"]

def get_comments(issue_key):
    url = f"{JIRA_BASE}/rest/api/2/issue/{issue_key}/comment"
    r = requests.get(url, cert=(CLIENT_CERT, CLIENT_KEY), verify=True)
    r.raise_for_status()
    return [c["body"] for c in r.json()["comments"]]

# ----------------------------
# 3. Build Stats + Tickets
# ----------------------------

def process_issues(issues):
    story_count, bug_count, done_count = 0, 0, 0
    tickets = []

    for issue in issues:
        issue_type = issue["fields"]["issuetype"]["name"]
        status = issue["fields"]["status"]["name"]
        comments = get_comments(issue["key"])

        if issue_type.lower() == "story":
            story_count += 1
        elif issue_type.lower() == "bug":
            bug_count += 1

        if status.lower() == "done":
            done_count += 1

        tickets.append({
            "key": issue["key"],
            "summary": issue["fields"]["summary"],
            "status": status,
            "type": issue_type,
            "comments": comments[-2:]  # last 2 only
        })

    stats = {
        "total_issues": len(tickets),
        "completed_issues": done_count,
        "completion_rate": f"{(done_count/len(tickets)*100) if tickets else 0:.1f}%",
        "stories": story_count,
        "bugs": bug_count,
        "carryover": len(tickets) - done_count
    }

    return tickets, stats

# ----------------------------
# 4. Generate Executive Summary
# ----------------------------

def generate_summary(sprint_name, tickets, stats):
    prompt = f"""
Sprint Report
Sprint: {sprint_name}

Stats:
- Total issues: {stats['total_issues']}
- Completed: {stats['completed_issues']} ({stats['completion_rate']})
- Stories: {stats['stories']}
- Bugs: {stats['bugs']}
- Carryover: {stats['carryover']}

Tickets:
{tickets}

Write an **executive summary** (2â€“3 paragraphs) for senior leadership.
Focus on accomplishments, bug fixes, carryover, and blockers based on comments.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an agile reporting assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    return response["choices"][0]["message"]["content"]

# ----------------------------
# 5A. Publish to Confluence
# ----------------------------

def publish_to_confluence(page_id, sprint_name, content_md):
    url = f"{CONFLUENCE_BASE_URL}/rest/api/content/{page_id}"
    headers = {"Content-Type": "application/json"}

    resp = requests.get(url, auth=(CONFLUENCE_USER, CONFLUENCE_TOKEN))
    page = resp.json()
    version = page["version"]["number"] + 1

    data = {
        "id": page_id,
        "type": "page",
        "title": f"Sprint Summary: {sprint_name}",
        "space": {"key": page["space"]["key"]},
        "version": {"number": version},
        "body": {
            "storage": {
                "value": content_md,
                "representation": "wiki"
            }
        }
    }

    r = requests.put(url, data=json.dumps(data), headers=headers, auth=(CONFLUENCE_USER, CONFLUENCE_TOKEN))
    r.raise_for_status()

# ----------------------------
# 5B. Send Email
# ----------------------------

def send_email(subject, html_body):
    msg = MIMEMultipart("alternative")
    msg["From"] = EMAIL_FROM
    msg["To"] = ", ".join(EMAIL_TO)
    msg["Subject"] = subject
    msg.attach(MIMEText(html_body, "html"))

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())

# ----------------------------
# MAIN EXECUTION
# ----------------------------

if __name__ == "__main__":
    sprint = get_active_sprint()
    issues = get_issues(sprint["id"])
    tickets, stats = process_issues(issues)
    summary = generate_summary(sprint["name"], tickets, stats)

    # Markdown for Confluence
    report_md = f"# Sprint Executive Summary: {sprint['name']}\n\n{summary}"

    # HTML for email
    report_html = f"""
    <html>
      <body>
        <h2>Sprint Executive Summary: {sprint['name']}</h2>
        <p>{summary.replace("\n", "<br>")}</p>
      </body>
    </html>
    """

    # Uncomment as needed:
    # publish_to_confluence(CONFLUENCE_PAGE_ID, sprint["name"], report_md)
    # send_email(f"Sprint Summary: {sprint['name']}", report_html)

    print(report_md)
