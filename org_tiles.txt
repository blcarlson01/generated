import React, { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";

// Organizational data (colors are Tailwind classes used in tiles and legend)
const orgData = {
  ceo: {
    id: "ceo",
    label: "CEO",
    color: "bg-blue-700",
    info: "Chief Executive Officer",
    stats: { headcount: 1, budget: "$10M", satisfaction: "95%" },
    overview: "The CEO oversees the entire organization, ensuring alignment of strategy, culture, and performance.",
    children: ["cto", "cfo", "coo"]
  },
  cto: {
    id: "cto",
    label: "CTO",
    color: "bg-blue-500",
    info: "Technology & Engineering",
    stats: { headcount: 40, budget: "$4M", satisfaction: "89%" },
    overview: "Responsible for technology strategy, infrastructure, and innovation.",
    children: ["eng", "qa"]
  },
  cfo: {
    id: "cfo",
    label: "CFO",
    color: "bg-blue-500",
    info: "Finance & Strategy",
    stats: { headcount: 20, budget: "$3M", satisfaction: "91%" },
    overview: "Oversees all financial operations, planning, and strategic growth.",
    children: ["finance", "acct"]
  },
  coo: {
    id: "coo",
    label: "COO",
    color: "bg-blue-500",
    info: "Operations & Execution",
    stats: { headcount: 25, budget: "$3.5M", satisfaction: "88%" },
    overview: "Manages daily operations and ensures organizational efficiency.",
    children: ["ops", "supply"]
  },
  eng: {
    id: "eng",
    label: "Engineering",
    color: "bg-blue-300",
    info: "Software, DevOps, Infra",
    stats: { headcount: 18, budget: "$2M", satisfaction: "92%" },
    overview: "Builds and maintains software systems across the company."
  },
  finance: {
    id: "finance",
    label: "Finance",
    color: "bg-blue-300",
    info: "Budgets & Planning",
    stats: { headcount: 10, budget: "$1M", satisfaction: "90%" },
    overview: "Handles all budgetary and fiscal management tasks."
  },
  ops: {
    id: "ops",
    label: "Operations",
    color: "bg-blue-300",
    info: "Manufacturing, Logistics",
    stats: { headcount: 12, budget: "$1.2M", satisfaction: "87%" },
    overview: "Manages production and logistics to ensure efficiency."
  },
  qa: {
    id: "qa",
    label: "QA",
    color: "bg-blue-200",
    info: "Testing & Product Quality",
    stats: { headcount: 6, budget: "$500k", satisfaction: "85%" },
    overview: "Ensures product quality and reliability through rigorous testing."
  },
  acct: {
    id: "acct",
    label: "Accounting",
    color: "bg-blue-200",
    info: "Accounts & Payroll",
    stats: { headcount: 8, budget: "$800k", satisfaction: "89%" },
    overview: "Handles all accounting and payroll functions."
  },
  supply: {
    id: "supply",
    label: "Supply Chain",
    color: "bg-blue-200",
    info: "Inventory, Fulfillment",
    stats: { headcount: 9, budget: "$900k", satisfaction: "84%" },
    overview: "Oversees supply chain, fulfillment, and inventory management."
  }
};

export default function OrgTileMap() {
  const [hovered, setHovered] = useState(null);
  const [activeNode, setActiveNode] = useState(orgData.ceo);
  const [history, setHistory] = useState([]);
  const containerRef = useRef(null);
  const svgRef = useRef(null);

  const handleTileClick = (nodeId) => {
    const node = orgData[nodeId];
    if (!node) return;
    if (!node.children) return; // nothing to drill into
    setHistory((prev) => [...prev, activeNode.id]);
    setActiveNode(node);
  };

  const handleBack = () => {
    setHistory((prev) => {
      if (!prev || prev.length === 0) return prev;
      const copy = [...prev];
      const prevId = copy.pop();
      if (prevId && orgData[prevId]) setActiveNode(orgData[prevId]);
      return copy;
    });
  };

  const children = activeNode.children ? activeNode.children.map((id) => orgData[id]) : [];

  useEffect(() => {
    const drawLines = () => {
      const svg = svgRef.current;
      const container = containerRef.current;
      if (!svg || !container) return;

      // Clear existing shapes
      while (svg.firstChild) svg.removeChild(svg.firstChild);

      // Parent anchor element
      const parentEl = container.querySelector(`[data-node-id="${activeNode.id}"]`);
      if (!parentEl || children.length === 0) return;

      const containerRect = container.getBoundingClientRect();
      const parentRect = parentEl.getBoundingClientRect();
      const parentX = parentRect.left + parentRect.width / 2 - containerRect.left;
      const parentY = parentRect.top + parentRect.height / 2 - containerRect.top;

      children.forEach((child) => {
        const childEl = container.querySelector(`[data-node-id="${child.id}"]`);
        if (!childEl) return;
        const childRect = childEl.getBoundingClientRect();
        const childX = childRect.left + childRect.width / 2 - containerRect.left;
        const childY = childRect.top + childRect.height / 2 - containerRect.top;

        // Create a curved path (quadratic bezier)
        const midX = (parentX + childX) / 2;
        const midY = (parentY + childY) / 2 - 20;
        const d = `M ${parentX} ${parentY} Q ${midX} ${midY} ${childX} ${childY}`;

        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        path.setAttribute("d", d);
        path.setAttribute("fill", "none");
        path.setAttribute("stroke", "#94a3b8");
        path.setAttribute("stroke-width", "2");
        path.setAttribute("stroke-linecap", "round");
        path.setAttribute("opacity", "0");

        svg.appendChild(path);

        // Animate draw using stroke-dasharray
        try {
          const length = path.getTotalLength();
          path.style.strokeDasharray = `${length}`;
          path.style.strokeDashoffset = `${length}`;
          path.style.transition = "stroke-dashoffset 600ms ease, opacity 250ms ease";
          // trigger on next frame
          requestAnimationFrame(() => {
            path.style.opacity = "1";
            path.style.strokeDashoffset = "0";
          });
        } catch (e) {
          // If getTotalLength is not available or fails, just fade in
          path.style.opacity = "1";
        }
      });
    };

    drawLines();

    const handleResize = () => drawLines();
    window.addEventListener("resize", handleResize);
    window.addEventListener("scroll", handleResize, true);

    let ro;
    try {
      ro = new ResizeObserver(drawLines);
      if (containerRef.current) ro.observe(containerRef.current);
    } catch (e) {
      // ResizeObserver not available in some environments; ignore
    }

    return () => {
      window.removeEventListener("resize", handleResize);
      window.removeEventListener("scroll", handleResize, true);
      if (ro && ro.disconnect) ro.disconnect();
    };
  }, [activeNode, children]);

  return (
    <TooltipProvider>
      <div className="relative flex flex-row items-start p-8 gap-8">
        {/* Main org chart area */}
        <div className="relative flex flex-col items-center flex-grow" ref={containerRef}>
          {/* SVG overlay sits behind tiles */}
          <svg ref={svgRef} className="absolute inset-0 w-full h-full pointer-events-none" style={{ zIndex: 0 }} />

          <h2 className="text-2xl font-semibold mb-6">Organizational Tile Map</h2>

          <div className="flex items-center gap-4 mb-4">
            {history.length > 0 && (
              <Button onClick={handleBack} variant="outline" size="sm">‚Üê Back</Button>
            )}
            <h3 className="text-lg font-medium">{activeNode.label}</h3>
          </div>

          <AnimatePresence mode="wait">
            <motion.div
              key={activeNode.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.25 }}
              className="flex flex-col items-center gap-6 w-full"
            >
              {/* Parent tile (centered) */}
              <div className="flex items-center justify-center w-full">
                <Tooltip>
                  <TooltipTrigger asChild>
                    <motion.div
                      data-node-id={activeNode.id}
                      whileHover={{ scale: 1.03 }}
                      onHoverStart={() => setHovered(activeNode.id)}
                      onHoverEnd={() => setHovered(null)}
                      onClick={() => handleTileClick(activeNode.id)}
                      className={`relative z-10 rounded-2xl shadow-md text-white flex items-center justify-center cursor-pointer transition-all duration-200 ${activeNode.color}`}
                      style={{ width: 144, height: 56 }}
                    >
                      <span className="text-sm font-medium">{activeNode.label}</span>
                    </motion.div>
                  </TooltipTrigger>

                  <TooltipContent side="top" className="shadow-lg">
                    <Card className="border-none bg-white text-gray-800 min-w-[180px]">
                      <CardContent className="p-3 text-sm">
                        <strong className="block mb-1">{activeNode.label}</strong>
                        <div className="text-xs text-gray-600 mb-1">{activeNode.info}</div>
                        {activeNode.stats && (
                          <div className="text-xs">
                            <div><strong>Headcount:</strong> {activeNode.stats.headcount}</div>
                            <div><strong>Budget:</strong> {activeNode.stats.budget}</div>
                            <div><strong>Satisfaction:</strong> {activeNode.stats.satisfaction}</div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </TooltipContent>
                </Tooltip>
              </div>

              {/* Children tiles */}
              <motion.div
                className="grid gap-4 justify-center"
                style={{ gridTemplateColumns: `repeat(${children.length || 1}, 6rem)`, gridAutoRows: "6rem" }}
              >
                {children.length === 0 ? (
                  <div className="text-gray-500">No sub-teams for this role</div>
                ) : (
                  children.map((tile) => (
                    <Tooltip key={tile.id}>
                      <TooltipTrigger asChild>
                        <motion.div
                          data-node-id={tile.id}
                          whileHover={{ scale: 1.05 }}
                          onHoverStart={() => setHovered(tile.id)}
                          onHoverEnd={() => setHovered(null)}
                          onClick={() => handleTileClick(tile.id)}
                          className={`relative z-10 rounded-2xl shadow-md text-white flex items-center justify-center cursor-pointer transition-all duration-200 ${tile.color}`}
                          style={{ width: 96, height: 48 }}
                        >
                          <span className="text-sm font-medium">{tile.label}</span>
                        </motion.div>
                      </TooltipTrigger>

                      <TooltipContent side="top" className="shadow-lg">
                        <Card className="border-none bg-white text-gray-800 min-w-[160px]">
                          <CardContent className="p-3 text-sm">
                            <strong className="block mb-1">{tile.label}</strong>
                            <div className="text-xs text-gray-600 mb-1">{tile.info}</div>
                            <div className="text-xs">
                              <div><strong>Headcount:</strong> {tile.stats.headcount}</div>
                              <div><strong>Budget:</strong> {tile.stats.budget}</div>
                              <div><strong>Satisfaction:</strong> {tile.stats.satisfaction}</div>
                            </div>
                          </CardContent>
                        </Card>
                      </TooltipContent>
                    </Tooltip>
                  ))
                )}
              </motion.div>
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Caption / overview panel with gradient legend */}
        <Card className="w-80 shadow-md border border-gray-200 bg-gradient-to-b from-blue-50 to-gray-50 text-gray-800 sticky top-8 self-start">
          <CardContent className="p-4 text-sm space-y-3">
            <h4 className="text-lg font-semibold mb-2">{activeNode.label} Overview</h4>
            <p className="text-sm">{activeNode.overview}</p>

            {activeNode.stats && (
              <div className="pt-2 border-t border-gray-200 text-xs">
                <div><strong>Headcount:</strong> {activeNode.stats.headcount}</div>
                <div><strong>Budget:</strong> {activeNode.stats.budget}</div>
                <div><strong>Satisfaction:</strong> {activeNode.stats.satisfaction}</div>
              </div>
            )}

            <div className="pt-4 border-t border-gray-200 text-xs">
              <strong>Color Gradient Meaning:</strong>
              <div className="mt-2 space-y-2">
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-700" />
                  <span>Executive leadership</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-500" />
                  <span>Department heads</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-300" />
                  <span>Mid-level teams</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-5 h-5 rounded bg-blue-200" />
                  <span>Sub-teams or specialized units</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
}
